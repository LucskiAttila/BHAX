<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/j7f9SkJR3oc">https://youtu.be/j7f9SkJR3oc</link>      
        </para>
        <caution>
            <title>Megjegyzés</title>
            <para>A feladat megoldásában tutoráltként részt vett: Stiegelmayer Máté</para>
        </caution>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0">https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0</link> (/tensorflow-0.9.0/tensorflow/examples/tutorials/mnist/), <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link>  
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az MNIST egy nagy adatbázis, melyben kézze írott számjegyek vannak 
            eltárolva. Ezt sokszor képfelisemrő programok tanítására szokták
            felhasználni, ahogy mi is tesszük ebben a feladatban. Magát a 
            programot python nyelven fogjuk megírni, de szükségünk lesz még a 
            TensorFlow telepítésére is.
        </para>
        <caution>
            <title>TensorFlow telepítése</title>
            <para>
                <programlisting>
sudo apt update
sudo apt install python3-dev python3-pip
sudo pip3 install -U virtualenv
sudo apt-get install python3-tk
                    
#virtuális környezet létrehozása
virtualenv --system-site-packages -p python3 ./venv
source ./venv/bin/activate
#ekkor megjelenik egy (venv) felirat a terminalban
pip install --upgrade tensorflow
python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"
pip install matplotlib                  
                </programlisting>
                Részletesebb leírásért látogass el a <link xlink:href="https://www.tensorflow.org/install/pip">TensorFlow hivatalos oldalára</link>
            </para>
        </caution>
        <caution>
            <title>Megjegyzés</title>
            <para>
                A program azon része, hogy a saját képünket ismerje fel, jelenleg nem
                működik, ezért a forrás módosítva lett, úgy, hogy helyette egy 
                MNIST mintát olvasunk be.
            </para>
            <para>
                Módosított forrás:<link xlink:href="https://github.com/fupn26/BHAX/tree/master/attention_raising/MNIST">itt</link>
            </para>
        </caution>
        <para>
            A python interpreteres nyelv, ezért nincs szükség rá, hogy lefordítsuk,
            elég kiadni a <function>python fajlnev.py</function> parancsot, és a
            program lefut. Nézzük meg a forrást.
            <programlisting><![CDATA[
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse

# Import data
from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf
old_v = tf.logging.get_verbosity()
tf.logging.set_verbosity(tf.logging.ERROR)

import matplotlib.pyplot]]>
            </programlisting>
            Az elején, ahogy a C/C++ nyelvekben már megszokhattuk,
            importáljuk a szükséges könyvtárakat. Itt egy apróbb
            módosítást láthattok az  alap forráshoz képest.
            <programlisting><![CDATA[
import tensorflow as tf
old_v = tf.logging.get_verbosity()
tf.logging.set_verbosity(tf.logging.ERROR)]]>
            </programlisting>
            Ezt a részt azért kellett kiegészíteni az utolsó két sorral,
            mert enélkül a program hibát dobott. Ahogy látható, ezen a 
            részen importáljuk a TensorFlow szoftver könyvtárat.
            <programlisting>
#  def readimg():
#    file = tf.read_file("sajat8a.png")
#    img = tf.image.decode_png(file)
#    return img
            </programlisting>
            Ez a függvény azért felelne, hogy saját képeket tudjunk 
            beolvasni. Most ez a fentebb említett okok miatt ki lett 
            kommentezve.
            <programlisting><![CDATA[
def main(_):
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)

  # Create the model
  x = tf.placeholder(tf.float32, [None, 784])
  W = tf.Variable(tf.zeros([784, 10]))
  b = tf.Variable(tf.zeros([10]))
  y = tf.matmul(x, W) + b

  # Define loss and optimizer
  y_ = tf.placeholder(tf.float32, [None, 10])

  # The raw formulation of cross-entropy,
  #
  #   tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),
  #                                 reduction_indices=[1]))
  #
  # can be numerically unstable.
  #
  # So here we use tf.nn.softmax_cross_entropy_with_logits on the raw
  # outputs of 'y', and then average across the batch.
  cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y_, logits = y))
  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

  sess = tf.InteractiveSession()
  # Train
  tf.initialize_all_variables().run(session=sess)
  print("-- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("----------------------------------------------------------")

  # Test trained model
  print("-- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
  print("----------------------------------------------------------")
  
  print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  
  img = mnist.test.images[42]
  image = img

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("4.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

  #print("-- A sajat kezi 8-asom felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  print("-- A MNIST 11. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
#  img = readimg()
#  image = img.eval()
#  image = image.reshape(28*28)
  img = mnist.test.images[11]
  image = img
  matplotlib.pyplot.imshow(image.reshape(28,28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("8.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS = parser.parse_args()
  tf.app.run()]]>
            </programlisting>
            Maga a <function>main</function> függvény a hivatalos TensorFlow
            péda programja az MNIST-re. Néhány módosítást pesrsze ehhez is 
            végre kellett hajatni.
            <programlisting>
#a régi verzió
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y, _y))
#a módosított
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y_, logits = y))
            </programlisting>
            Az újabb TensorFlow verzió más szintaktikát alkalmaz, ezért volt szükség az
            átalakításra.
            
            Ahogy a neurális hálózatoknál megtanultuk, itt is tanítani kell a 
            hálózatot. Ehhez a TensorFlow eszköztárát használjuk:
            <programlisting>
  sess = tf.InteractiveSession()
  # Train
  tf.initialize_all_variables().run(session=sess)
  print("-- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("----------------------------------------------------------")
            </programlisting>
            A tanításhoz létrehozunk egy interaktív session-t, mely
            az alapértlemezett session lesz a tanítás során. A 
            <function>for</function> cikluson belül 1000-szer
            végrehajtjuk a tanítást a pontosabb eredmény érdekében, folyamat 
            előrehaladását 
            a felhasználó a terminálban láthatja.
            Ha pedig ezzel végeztünk, kezdhetjük a modell tesztelését.
            <programlisting>
  print("-- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
  print("----------------------------------------------------------")
  
  print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  
  img = mnist.test.images[42]
  image = img

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("4.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")
            </programlisting>
            Első lépésként megtudjuk, hogy a modell mennyire pontos. Ezt 
            a felhasználóval tudatjuk. Majd megnyitjuk az első képet, és
            ha a felhasználó bezárja az ablakot, akkor megtudjuk a program
            melyik számra tippel. Eddig tesztelésem során nem hibázott, szóval
            elég nagy eséllyel eltalálja. A program, amúgy 90%-os ponotossággal
            dolgozik, ez teszi lehetővé a jó eredméynt.
            A képeket az MNIST adatbázisból töltjük be, a <function>matplotlib</function>
            könyvtár segítségével rajzoltatjuk ki a képet a felhasználó elé, majd
            elmentjük a képet egy fájlba.  Azt, hogy minek ismerte fel a 
            program a képet, a <function>calssification</function> tömbben tároljuk el.
            <programlisting>
if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS = parser.parse_args()
  tf.app.run()
            </programlisting>
            A program elején importáltuk az <function>argparser</function>
            könyvtárat. Ezt arra tudjuk használni, hogy kapcsolókat tudjunk
            létrehozni a programunk számára. Jelen esetben a <function>--data_dir</function>
            kapcsoló használatával mg tudjuk adni, hogy hol tárolj a program a 
            tanuláshoz szükséges állományokat. 
        </para>
    </section>        

<!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->
    
    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <caution>
            <title>Passzolva</title>
        </caution>
    </section>        
<!--
    <section>
        <title>Deep dream</title>
        <para>
            Keras            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->                  
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Microsoft/malmo/releases">itt</link>              
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Project Malmo-t a Microsoft indította el a mesterséges intelleginciában
            való kutatás éredkében. A lényege, hogy a programozók beprogramozhatják
            a Minecraft karakter mozgását, de nem csak azt, hogy hogyan mozogjanak, hanem azt
            is, hogy felismerjék a környezetüket. Tehát képesek vagyunk a gépi tanulást
            szimulálni a játékban. A gép megtanulja, hogyan maradjon életben a 
            virtuális világban. Ebben a feladtban azt fogjuk megnézni, hogy
            ezt hogyan valósítja meg a program. Ebben a feladatban is a Python 
            programozási nyelvet fogjuk használni, lényegében a projekt python-os
            példáit nézzük át. A Malmo projekt Github-on megtalálható
            csomagjai tartalmaznak tutorial feladatokat, melyek segítségével
            a kezdők megismerkedhetnek a programmal. Lássuk az első példát:
            <programlisting>
# Tutorial sample #1: Run simple mission

from builtins import range
import MalmoPython
import os
import sys
import time

if sys.version_info[0] == 2:
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)  # flush print output immediately
else:
    import functools
    print = functools.partial(print, flush=True)

# Create default Malmo objects:

agent_host = MalmoPython.AgentHost()
try:
    agent_host.parse( sys.argv )
except RuntimeError as e:
    print('ERROR:',e)
    print(agent_host.getUsage())
    exit(1)
if agent_host.receivedArgument("help"):
    print(agent_host.getUsage())
    exit(0)

my_mission = MalmoPython.MissionSpec()
my_mission_record = MalmoPython.MissionRecordSpec()

# Attempt to start a mission:
max_retries = 3
for retry in range(max_retries):
    try:
        agent_host.startMission( my_mission, my_mission_record )
        break
    except RuntimeError as e:
        if retry == max_retries - 1:
            print("Error starting mission:",e)
            exit(1)
        else:
            time.sleep(2)

# Loop until mission starts:
print("Waiting for the mission to start ", end=' ')
world_state = agent_host.getWorldState()
while not world_state.has_mission_begun:
    print(".", end="")
    time.sleep(0.1)
    world_state = agent_host.getWorldState()
    for error in world_state.errors:
        print("Error:",error.text)

print()
print("Mission running ", end=' ')

# Loop until mission ends:
while world_state.is_mission_running:
    print(".", end="")
    time.sleep(0.1)
    world_state = agent_host.getWorldState()
    for error in world_state.errors:
        print("Error:",error.text)

print()
print("Mission ended")
# Mission has ended.

            </programlisting>
            Ez a példa azt mutatja meg, hogy hogyan tudunk elindítani egy 
            küldetést a Malmo mod segítségével.Első lépésként létre kell 
            hoznunk egy <function>agent_host</function> objektumot. Majd az ehhez
            tartozó függvények segítségével elindítjuk a küldetést, anélkül, hogy a 
            futó Minecraft programba mi belenyúlnánk. A küldetés 10 másodpercig tart,majd 
            a küldetés befejeződik. Ezután a felhasználó irányíthatja a Minecraft karaktert.
            Lehetőség van arra is, hogy XML szerűen tároljuk el az utasításokat. Erre ad példát a
            a második példa. 
            <programlisting><![CDATA[
                missionXML='''<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
            <Mission xmlns="http://ProjectMalmo.microsoft.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            
              <About>
                <Summary>Hello world!</Summary>
              </About>
              
              <ServerSection>
                <ServerHandlers>
                  <FlatWorldGenerator generatorString="3;7,220*1,5*3,2;3;,biome_1"/>
                  <ServerQuitFromTimeUp timeLimitMs="30000"/>
                  <ServerQuitWhenAnyAgentFinishes/>
                </ServerHandlers>
              </ServerSection>
              
              <AgentSection mode="Survival">
                <Name>MalmoTutorialBot</Name>
                <AgentStart/>
                <AgentHandlers>
                  <ObservationFromFullStats/>
                  <ContinuousMovementCommands turnSpeedDegs="180"/>
                </AgentHandlers>
              </AgentSection>
            </Mission>''']]>
            </programlisting>
            Tehát a <function>missionXML</function> változóban tároljuk az 
            utasításokat. A pprogram kiírja, hogy <function>Hello world!</function>,
            generál egy világot, majd 30 másodpercig fut, végül átadja az irányítást a 
            felhasználónak. Mivel lehetőségünk van befolyásolni a világot, ezért 
            rajzolhatunk is benne tárygakat. Ezt mutatja be a harmadik példa.
            A rajzoláshoz szükségünk van elsőnek egy függvényre:
            <programlisting><![CDATA[
    def Menger(xorg, yorg, zorg, size, blocktype, holetype):
    #draw solid chunk
    genstring = GenCuboid(xorg,yorg,zorg,xorg+size-1,yorg+size-1,zorg+size-1,blocktype) + "\n"
    #now remove holes
    unit = size
    while (unit >= 3):
        w=old_div(unit,3)
        for i in range(0, size, unit):
            for j in range(0, size, unit):
                x=xorg+i
                y=yorg+j
                genstring += GenCuboid(x+w,y+w,zorg,(x+2*w)-1,(y+2*w)-1,zorg+size-1,holetype) + "\n"
                y=yorg+i
                z=zorg+j
                genstring += GenCuboid(xorg,y+w,z+w,xorg+size-1, (y+2*w)-1,(z+2*w)-1,holetype) + "\n"
                genstring += GenCuboid(x+w,yorg,z+w,(x+2*w)-1,yorg+size-1,(z+2*w)-1,holetype) + "\n"
        unit = w
    return genstring]]>
            </programlisting>
            Ez a függvény felelős azért, hogy rajtoljunk egy nagy kocka, és abban
            pedig apró lyukakat végjunk. A végeredmény pedig ez lesz:
            <figure>
            <title>Tutorial_3</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Malmo/tutorial_3.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
            A 4. példa mutatja be azt, hogyan lehet iráynítani a karaktert. Jelen esetben a 
            az előbb létrehozott lyukacsos test belsejébe juttat el. Ezt a következő
            parancsokkal érjük el:
            <programlisting>
agent_host.sendCommand("hotbar.9 1")
agent_host.sendCommand("hotbar.9 0")
agent_host.sendCommand("pitch 0.2")
time.sleep(1)
agent_host.sendCommand("pitch 0")
agent_host.sendCommand("move 1")
agent_host.sendCommand("attack 1")
            </programlisting>
            Terhát szintaktikailag így lehet átadni parancsot a karakternek. De ez
            még nem az a szint, amit a bevezetőben belengettem, amikor már a 
            karakterünk érzékeli a környezetét. Viszont az ötödik példában
            már ilyet is láthatunk. Na jó, persze ezt is be kell programozni, 
            nem a gép jön rá magától, de már egy fokkal inteligensebb, mint
            az előző feladatban.
            <programlisting>
if world_state.number_of_observations_since_last_state > 0:
   msg = world_state.observations[-1].text
   observations = json.loads(msg)
   grid = observations.get(u'floor3x3', 0)
   if jumping and grid[4]!=u'lava':
      agent_host.sendCommand("jump 0")
      jumping = False
   if grid[3]==u'lava':
      agent_host.sendCommand("jump 1")
      jumping = True
            </programlisting>
            A <function>json.loads(msg)</function> függvény segítségével tesszük lehetővé, hogy
            a környzetet tudjuk vizsgálnoi. A <function>grid</function> változónak átadjuk a
            talajt, majd azt vizsgálva, ahol láva van a karakter bizonyos környezetében, 
            akkor a karakter ugrik egyet. A 6-os példa hozza el az igazi áttörést
            gép tanulás tekintatében. Itt a <function>Q-learning</function> technológiát
            használja a program. A küldetés többször lefut, és feljegyzi, hogy mennyit
            tudott mozogni a karakter az egyes irányokba, ameddig meghalt. Ezzel azt 
            éri el, hogy életben tudja tartani a gép a karaktert.
            <programlisting>
class TabQAgent(object)
                ...  
            </programlisting>
            A lényeget a <function>TabQAgent</function> osztály tartalmazza.  
            Az osztály konstruktora a következő:
            <programlisting><![CDATA[
def __init__(self):
  self.epsilon = 0.01 # chance of taking a random action instead of the best

  self.logger = logging.getLogger(__name__)
  if False: # True if you want to see more information
      self.logger.setLevel(logging.DEBUG)
  else:
      self.logger.setLevel(logging.INFO)
  self.logger.handlers = []
  self.logger.addHandler(logging.StreamHandler(sys.stdout))

  self.actions = ["movenorth 1", "movesouth 1", "movewest 1", "moveeast 1"]
  self.q_table = {}
  self.canvas = None
  self.root = None]]>
            </programlisting>
            Itt meg vannak adva a lehetséges parancsok, amiket a 
            karakter végrehajthat. Ezek közül fog választani majd a program
            félig random, félig pedig a megismert információk alapján.
            <programlisting><![CDATA[
def updateQTable( self, reward, current_state ):
        """Change q_table to reflect what we have learnt."""
        
        # retrieve the old action value from the Q-table (indexed by the previous state and the previous action)
        old_q = self.q_table[self.prev_s][self.prev_a]
        
        # TODO: what should the new action value be?
        new_q = old_q
        
        # assign the new action value to the Q-table
        self.q_table[self.prev_s][self.prev_a] = new_q
        
def updateQTableFromTerminatingState( self, reward ):
        """Change q_table to reflect what we have learnt, after reaching a terminal state."""
        
        # retrieve the old action value from the Q-table (indexed by the previous state and the previous action)
        old_q = self.q_table[self.prev_s][self.prev_a]
        
        # TODO: what should the new action value be?
        new_q = old_q
        
        # assign the new action value to the Q-table
        self.q_table[self.prev_s][self.prev_a] = new_q]]>
            </programlisting>
            A program futása során megjelenik egy táblázat, amiben a megismert információkat
            követheti a felhasználó. Az előbbi két függvény ennek a táblázatnak
            a frissítését végzi. 
            <programlisting><![CDATA[
def act(self, world_state, agent_host, current_r ):
       ...
       
       rnd = random.random()
        if rnd < self.epsilon:
            a = random.randint(0, len(self.actions) - 1)
            self.logger.info("Random action: %s" % self.actions[a])
        else:
            m = max(self.q_table[current_s])
            self.logger.debug("Current values: %s" % ",".join(str(x) for x in self.q_table[current_s]))
            l = list()
            for x in range(0, len(self.actions)):
                if self.q_table[current_s][x] == m:
                    l.append(x)
            y = random.randint(0, len(l)-1)
            a = l[y]
            self.logger.info("Taking q action: %s" % self.actions[a])]]>
            </programlisting>
            A karakter által elvégzett mozgásokat a <function>act</function>
            függvény határozza meg. Ahogy látható, ha a random szám kisebb, mint
            a konstruktorban a véletlen lépés esélyére adott értéknél, akkor
            az alapértelmezetten megadott mozgások egyikét választja a program, anélkül,
            hogy figyelembe venné a már megismert adatokat. Ellenkező esetben pedig
            az aktuális állapot alapján választ egy random lépést.
            <programlisting><![CDATA[
def run(self, agent_host):
     ...
     # main loop:
        world_state = agent_host.getWorldState()
        while world_state.is_mission_running:

            current_r = 0
            
            if is_first_action:
                # wait until have received a valid observation
                while True:
                    time.sleep(0.1)
                    world_state = agent_host.getWorldState()
                    for error in world_state.errors:
                        self.logger.error("Error: %s" % error.text)
                    for reward in world_state.rewards:
                        current_r += reward.getValue()
                    if world_state.is_mission_running and len(world_state.observations)>0 and not world_state.observations[-1].text=="{}":
                        total_reward += self.act(world_state, agent_host, current_r)
                        break
                    if not world_state.is_mission_running:
                        break
                is_first_action = False
            else:
                # wait for non-zero reward
                while world_state.is_mission_running and current_r == 0:
                    time.sleep(0.1)
                    world_state = agent_host.getWorldState()
                    for error in world_state.errors:
                        self.logger.error("Error: %s" % error.text)
                    for reward in world_state.rewards:
                        current_r += reward.getValue()
                # allow time to stabilise after action
                while True:
                    time.sleep(0.1)
                    world_state = agent_host.getWorldState()
                    for error in world_state.errors:
                        self.logger.error("Error: %s" % error.text)
                    for reward in world_state.rewards:
                        current_r += reward.getValue()
                    if world_state.is_mission_running and len(world_state.observations)>0 and not world_state.observations[-1].text=="{}":
                        total_reward += self.act(world_state, agent_host, current_r)
                        break
                    if not world_state.is_mission_running:
                        break]]>  
            </programlisting>
            A <function>run</function> függvény felelős a karakter mozgatásáért. Az aktuális 
            állapot itt tárolódik, itt történik az <function>act</function> függvény
            meghívása. Ellenőrzi, hogy az első akciót hajtjuk-e végre. 
       </para>
    </section>        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
</chapter>                
