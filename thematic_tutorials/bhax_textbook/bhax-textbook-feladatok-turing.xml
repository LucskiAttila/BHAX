<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Source/V%C3%A9gtelen%20ciklus">itt</link>               
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Végtelen ciklusnak olyan ciklusokat hívunk, melyek soha nem érnek véget, általában valamilyen logikai hiba miatt.
            Pl:
            <programlisting language="c"><![CDATA[Program pelda
                {
                int main()
                {
                    int i = 0;
                    while (i<=0)
                    {
                        i = i-1;
                    }
                }
                }]]>
            </programlisting>
            Ebben jól láthatod, hogy a while cilusban lévő feltétel folyamatosan teljesül, theát a program végtelen ciklusba kerül.
            Viszont, ha kifejezetten végtelen ciklust szeretnél írni, ennek a legelegánsabb módja a következő:
            <programlisting language="c"><![CDATA[Program vegtelen.c
                {
                int main()
                {
                    for(;;);
                }
                }
                ]]>
            </programlisting>
            Ez a végtelen ciklus csak egy magot dolgoztat, de azt 100%. A lényege annyi, hogy a for ciklus nem kap semmilyen argumentumot,
            ennek következtében a ciklus előtti teszt folyamatosan igazat fog adni, tehát a ciklus nem fejeződik be.
        </para>
        <para>    
            De nem elégszünk meg az egy maggal, hiszen ma már a legtöbb számítógép legalább 4 maggal rendelkezik. Tehát találni kell egy 
            megoldást, hogy az összes mag dolgozzon 100%-on. Ezt oldja meg az OpenMP.(Bővebben <link xlink:href="https://en.wikipedia.org/wiki/OpenMP">itt</link> olvashatsz erről.)
            A lényege annyi, hogy program több szálon dolgozhat, így kihasználva a rendelkezésre álló erőforrásokat. Ráadásul ez könnyen implementálható az előző kódunkba:
            <programlisting language="c"><![CDATA[Program vegtelen_all.c
                {
                int main()
                {
                    #pragma omp parallel
                    for(;;);
                }
                }
                ]]>
            </programlisting>
            Amint látod, csak a #pragma omp paralellel sort kellett hozzáadni. Természetesen ezt bármelyik programodnál használhatod, sőt javasolt is, köszönthetően a hardverek gyors fejlődésének.
        </para>
        <para>
            Még egy dologgal adós vagyok. Már láttad, hogy hogyan lehet megoldani, hogy egy végtelen ciklus 100%-ban használjon egy magot, majd azt is, hogyan használjon 100%-ban a processzort.
            Itt az idő megnézni, hogyan lehet elérni, hogy egy végtelen ciklus egyáltalán ne használjon (vagyis nagyon keveset) a CPU által biztosított erőforrásból. Ehhez a sleep függvényre lesz szükségünk.
            A kód a következő:
            <programlisting language="c"><![CDATA[Program vegtelen_s.c
                {
                    int main()
                    {
                        for(;;)
                        {
                            sleep(1);
                        }
                    }
                }
                ]]>
            </programlisting>
            A sleep függvény lényegében minden meghívásánál "aludni" küldi azt a szálat, amit program használna, jelen esetben 1 másodpercig altatja.
        </para>
    </section>
                     
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne végtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Alan Turing a XX.század egyik legjelentősebb brit matematikusa, a modern számítógép-tudomány atyja. Az ő nevéhez fűződik a Turing-gép, mint fogalom, ezt 1936-ban dolgozta ki. De
            egy másik fontos eredménye is van, hiszen az ő segítségével sikerült a szövetségeseknek feltörni a Náci Németország titkosító berendezését, az Enigmát. Enélkül talán soha nem sikerült
            volna véget vetni a II. világháborúnak, de az biztos, hogy sokkal több emberveszteséggel járt volna. Ezt a történetet dolgozza a fel a <link xlink:href="https://www.imdb.com/title/tt2084970/">Kódjátszma</link>
            című film.
        </para>
        <para>
            De visszatérve a Turing-géphez, ez egy 3 főbb fizikai egységből áll: egy cellákra osztott papírszalagból, egy vezérlőegységből és egy író-olvasó fejből. A működése nagyjából abból áll, hogy az
            író-olvasó fej a szalagon beolvas egy cellát, módosítja, majd tovább mozog. Ez folytatódik minden iterációban. Ennek kétféle kimenetele lehet, vagy megáll a "program", vagy végtelen ciklusba kerül.
            Egy másik fontos fogalom az Univerzális Turing-gép, melynek lényege az, hogy egy bemenetre ugyan azt az eredményt adja mindegyik Turing-gépen. Ezzel eljutottunk a megállási problémához, mely mind a
            mai napig megoldhatatlan probléma elé állította a számítógép-tudományt. A megállási probléma azt mondja ki, hogy nem tudunk olyan programot írni, amely meg tudja mondani egy másikról, hogy az le fog-e
            fagyni, azaz végtelen ciklusba kerül-e, vagy sem.
            Ez az ábra szemlélteti a forrásban leírtakat:
            <figure>
                <title>Megállási probléma</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Megállás/vegtelen.png" format="JPG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
        </para>
        <para>
            Tehát a T100-as program kap egy programot bemenetként, és arról eldönti, hogy az megáll-e vagy sem. Ebben az esetben a bemeneti programot úgy kell elképzelni, mint egy szöveges fájlt.
            A program beolvassa és eldönti, hogy van-e benne végtelen ciklus. A T100-as visszaad egy igaz/hamis értéket. Ezt átadjuk a T1000-es programnak, mely ha a bemenet igaz, akkor megáll, ha az érték
            hamis, akkor pedig végtelen ciklusba kerül. Itt azt hihetnén, hogy minden rendben, hiszen a program működik, de mi történik akkor, ha a T1000-es program bemenete önmaga. Ha úgy érzékeli, hogy nincs
            önmagában végtelen ciklus, akkor végtelenciklusba kerül, ha pedig van benne végtelen ciklus, akkor pedig megáll. Itt jól láthatod az ellentmondást. Ez az oka annak, hogy mind a mai napig nem tudott senki
            ilyen programot létrehozni. 
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Source/V%C3%A1ltoz%C3%B3%20felcser%C3%A9l%C3%A9se">itt</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Ha valaki két változónak az értékét fel akarja cserélni, akkor a legegyszerűbb megoldásnak egy segédváltozó bevezetése tűnhet. De természetesen ennél sokkal kifinomultabb eszközök is vannak
            erre a célra. Az egyik ilyen megoldás, hogy valamilyen matematikai műveletet használunk. Egyik megoldás az, hogy a két változó értékét összeadjuk, majd ebből az összegből kivonjuk a változók régi értékét
            úgy, hogy a értékük felcserélődjön.
            Tehát:
            <programlisting language = "c"><![CDATA[
                int a = 4;
                int b = 5;
                a = a+b;
                b = a-b;
                a = a-b;
            ]]></programlisting>
            Ez szín tiszta matematika, viszont ennél egy sokkal érdekesebb dolog ugyan ennek a feladatnak EXOR-ral való megvalósítása. A lényeg annyi, hogy a számítógép a változó értékét 2-es számrendszerben tárolja
            ennek következtében a szám 0-kból és 1-kből áll. A XOR (kizáró vagy) minden esetben 1-et ad vissza, azaz igaz értéket, kivéve ha a művelet jobb és bal oldalán azonos érték van,
            mert ilyenkor 0-t ad vissza. Ezt használjuk most ki a következő példában:
            <programlisting language = "c"><![CDATA[
                int a = 4; //2-es számrendszerben: 0100
                int b = 5; //2-es számrendszerben: 0101
                a = a^b; // 0100 ^ 0101 = 0001
                b = a^b; //0001 ^ 0101 = 0100
                a = a^b //0001 ^ 0100 = 0101
            ]]></programlisting>
            A komment szekcióban láthatjátok, hogy mi is történik a háttérben.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Source/Labdapattog%C3%A1s">itt</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Ahogy a videóban láthattátok, a labdapattogás annyiból áll, hogy a terminálon belül egy karakter pattog a az ablak teljes méretében. Fontos, hogy az ablak méretét állíthatjuk, és a program ezt érzékeli.
            <programlisting language="c"><![CDATA[
                WINDOW *ablak;
                ablak = initscr ();
            ]]>
            </programlisting>
            Az initscr() beolvassa az ablak adatait, melynek segítségével megtudjuk az ablak méretét.
            Ezután létrehozunk változókat, melyekben a lépésközt, a pozíciót, és az ablak méretét fogjuk eltárolni.
            <programlisting language="c"><![CDATA[
                int x = 0; //aktuális pozíció x-tengelyen
                int y = 0; //aktuális pozíció y-tengelyen

                int xnov = 1; //lépésköz az x-tengelyen
                int ynov = 1; //lépésköz az y-tengelyen

                int mx; //ebben lesz eltárolva az ablak szélessége
                int my; //ebben pedig az ablak magassága
            ]]>
            </programlisting>
            Ezután létrehozunk egy végtelen ciklust a már megszokott módon:
            <programlisting language="c"><![CDATA[
                for (;;)
                {
                }
            ]]>
            </programlisting>
            És ebbe a végtelen ciklusba fogjuk "pattogtatni" a labdát. Ehhez elsőnek meghívjuk a getmaxyx() függvényt melynek átadjuk paraméterként a az ablakban eltárolt értékeket, és azt, hogy meylik
            változóba tárolja el az ablak hosszúságát és szélességét. És az mvprintw() függvény fogja az általunk megadott koordinátákba a karaktert "mozgatni".
            <programlisting language="c"><![CDATA[
                getmaxyx ( ablak, my , mx );
                mvprintw ( y, x, "O" );
            ]]>
            </programlisting>
            Mostmár tudjuk az ablak méretét. Az x és az y változót folyamatosan 1-el növelve a karakter el kezd mozogni a terminálban. Azt, hogy ez milyen gyorsan történjen, azt a usleep() függvénnyel
            tudjuk beállítani. A usleep mikroszekundumba számol, tehát az másodperc egymiliomod részében. Ha azt akarjuk, hogy a labda másodpercenként menjen 1-et, akkor 1000000-et kell beírnunk a usleep-be.
            Így:
            <programlisting language="c"><![CDATA[
                usleep(1000000);
            ]]>
            </programlisting>
            Most, hogy a labda már mozog, már csak meg kéne állnia az ablak határainál.
            Ezt pedig if-el fogjuk elsősorban megoldani.
            <programlisting language="c"><![CDATA[
                if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
                xnov = xnov * -1;
                }
                if ( x<=0 ) { // elerte-e a bal oldalt?
                        xnov = xnov * -1;
                }
                if ( y<=0 ) { // elerte-e a tetejet?
                        ynov = ynov * -1;
                }
                if ( y>=my-1 ) { // elerte-e a aljat?
                        ynov = ynov * -1;
                }
            ]]>
            </programlisting>
            Tehát, ha a labda eléri valamelyik szélét az ablaknak, akkor a lépésközt megszorozzuk -1-el, így elérve, hogy visszapattanjon.
        </para>
        <para>
            Egy másik megoldás is létezik ehhez, mégpedig az, ahol nem használunk if-et. Ennél a for-cikluson belül a következőt írjuk:
            <programlisting language="c"><![CDATA[
                getmaxyx(ablak, my, mx);
                xj = (xj - 1) % mx;
                xk = (xk + 1) % mx;

                yj = (yj - 1) % my;
                yk = (yk + 1) % my;

                //clear ();

                mvprintw (abs (yj + (my - yk)),
                  abs (xj + (mx - xk)), "X");

                refresh ();
                usleep (150000);
            ]]>
            </programlisting>
            Ennél a maradékos ozstást használjuk ahhoz, hogy a labda egy bizonyos érték után "visszapattanjon". A lényeg annyi, hogy a modulóval való osztás, mindig annak
            a szának az értékét adja vissza, amit elosztunk egészen addig, ameddig egyenlő nem lesz az ablak szélességével/hosszával, mert akkor újra visszaáll 1-re(vagy -1-re),
            ebben a pillanatban a lapbda elindul visszafelé, és ez folytatódik végtelen ciklusban. A program futását Ctrl+c-vel tudjátok megállítani.
            Jelenleg ehhez további magyarázatot nem tudok fűzni, mivel én nekem eszembe se jutott volna ez a megoldás módszer.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Source/Sz%C3%B3hossz">itt</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Ahogy láthattad a forrásban, a gépeden egy szó 32 bites. Hogy ezt kiszámold, arra rengeteg megoldás létezik. Az egyik iylen a bitshiftelés, melynek lényege az, hogy
            addig léptetjük a számot, ameddig nulla nem lesz.
            <programlisting language="C"><![CDATA[
                int a = 1; //kettes számrendszerben: 00000000 00000000 00000000 00000001
                while (a != 0){
                    a << = 1; //itt léptetjük eggyel:00000000 00000000 00000000 00000010
                              // újra: 00000000 00000000 00000000 00000100
                              //...
                }
            ]]>
            </programlisting>
            Ha ezt megismételjük 32-ször, akkor végén csak nullákból fog állni, mivel ez nem körkörös folyamat, ha az egy elér az elejére, akkor nem fogvisszaugrani a végére.
            A linkelt forrásban az 1 hexadecimálisan lett megadva, de nyugodtan használhatod az általam írt példát, mivel ugyan azt az eredményt adja.
        </para>
        <para>
            Ennek a résznek a másik fontos témája a BogoMIPS. Ez lényegében egy Cpu tesztelő program, melyet Linus Torvalds írt, és a linux kernel része mind a mai napig. A lényege az, hogy a program méri, hogy
            mennyi idő alatt fut le, ezzel megmondva, hogy a CPU-d milyen gyors. Persze, ha CPU vásárlás előtt állsz, ne pont ez alapján dönts egyik-másik processzor mellett.
            Számunkra azért érdekes ez a program, mert ennek a while fejléce ugyan azt a megoldást hasznája, amit mi a szóhossz számítsásához. 
            <programlisting language="c"><![CDATA[
                while (loops_per_sec <<= 1)
                {
                    ;
                }
                ]]>
            </programlisting>
            Most, hogy láttátok, hogy mi a kapcsolat a mi kis programunk és a Linus Torvalds féle BogoMIPS között, akkor lássuk is, hogy hogyan működik pontosan.
            Elsőnek deklarálnunk kell 2 változót, az első a <function>loops_per_sec</function>, melynek definiálása során az értékét egyre álllítjuk. A bitshiftelésnek köszönhetően ebbe 2 hatványokat fogunk tárolni.
            A <function>ticks</function> pedig a CPU időt fogja tárolni.
            <programlisting language="c"><![CDATA[
                while (loops_per_sec <<= 1 )
                {
                    ticks = clock();
                    delay (loops_per_sec);
                    ticks = clock() - ticks;
		
                    ...
                }
            ]]>
            </programlisting>
            A while ciklus addig tart, ameddig a <function>loops_per_sec</function> le nem nullázódik. A ciklusba belépve, minden iterációban, lekérdezzük az aktuális CPU időt, és eltároljuk a <function>ticks</function>
            változóban. Ezután pedig meghívjuk a <function>delay</function> függvényt.
            <programlisting language="c"><![CDATA[
                void delay (unsigned long long  loops)
                    {
                        unsigned long long i;
                        for ( i=0; i<loops; i++);
                    }
            ]]>
            </programlisting>
            Ez a függvény egy hosszú egész számot kér paraméteréül, és amint látod, csak egy for ciklus megy végig 0-tól paraméter-1-ig. Ezután a <function>while</function> cikluson belül újra lekérjük az aktuális
            processzot időt és kivonjuk belőle a kezdeti étéket. Így megkapjuk, hogy menniy ideig tartott a cpu-nak befejeznie a <function>delay</function> függvényben lévő <function>for</function> ciklus befejezéséig.
            Ezt egészen addig iteráljuk, ameddig nem teljesül az <function>if</function>-ben lévő feltétel.
            <programlisting language="c"><![CDATA[
                while (loops_per_sec <<= 1 )
                {
                    ...
                    
                    if (ticks >= CLOCKS_PER_SEC)
                    {
			loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC; //loops_per_sec/ticks = ???/CLOCKS_PER_SEC
			
			printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec/500000,
						(loops_per_sec/5000) % 100);
                        return 0;
                    }
                }
                ]]>
            </programlisting> 
            A <function>CLOCKS_PER_SEC</function> a POSIX szabvány szerinti értéke 1.000.000, tehát akkor teljesül a feltétel, ha a processzor idő ezzel egyenlő, vagy nagyobb. Ezután pedig kiszámoljuk, hogy 
            <function>CLOCKS_PER_SEC</function> idő alatt milyen hosszú ciklust képes végrahajtani a gép. Ennek az eredénye egy viszonylag nagy szám lesz, de a végeredmény megadásához használhatjuk a <function>log</function>
            függvényt, mely sokkal lassabban növekszik, így egy jóval kisebb számot kapunk eredményül. Ehhez csak egy kicsit kell módosítani az előbbi forrást:
            <programlisting language="c"><![CDATA[
                printf("ok - %lld %f BogoMIPS\n", loops_per_sec, log(loops_per_sec));
             ]]>   
            </programlisting>
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Source/PageRank">itt</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A PageRank-et Larry Page és Sergey Brin fejlesztette ki 1998-ban. Az algoritmus az alapja mind a mai napig a Google keresőmotorjának. A lényege az, hogy osztályozza az oldalakat az alapján, hogy hány link mutat
            rájuk és a rájuk mutató oldalakra hány oldal mutat. Tehát általában az az oldal lesz az első találat, amelyikre a legtöbb oldal hivatkozik. Ez az ötlet megjelenésekor hatalmas forradalmat hozptt az internetes keresők
            világában, hiszen a pontos találatok száma jelentősen megnőtt. Az előtt csak álom volt, hogy már az első találat az lesz, amit éppen keres, de a PageRank-kel ez valósággá vált. Ezt a forradalmi agoritmusnak láthatod
            a forrásban is, egy 4 honlapos hálózatra leszűkítve. 
        </para>
        <para>
            Az első iterációban mindegyik oldal PageRank-je 1/4, hiszen 4 oldalunk van. Ezután kezdjük el viszgálni, hogy ezek között milyen kapcsolatvan.
            <figure>
                <title>PageRank</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/PageRank/pagerank.png" format="JPG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
            A kapcsolatokat egy mátrixban tároljuk:
            <programlisting language="c"><![CDATA[
                double L[4][4] = {
                      /*1.*/   /*2.*/   /*3.*/  /*4.*/ 
                 /*1.*/{0.0,      0.0,  1.0/3.0,  0.0}, 
                 /*2.*/{1.0,  1.0/2.0,  1.0/3.0,  1.0},
                 /*3.*/{0.0,  1.0/2.0,      0.0,  0.0},
                 /*4.*/{0.0,      0.0,  1.0/3.0,  0.0}
                };	
            ]]>    
            </programlisting>
            Az sorok és oszlopok metszetében láthatod, hogy milyen kapcsolatvan van az oldalak között. Ezt a mátrixot adjuk át argumentumként a <function>pagerank()</function> függvénynek, mely így néz ki:
            <programlisting language="c"><![CDATA[
            void
            pagerank(double T[4][4]){
                double PR[4] = { 0.0, 0.0, 0.0, 0.0 }; //ebbe megy az eredmény
                double PRv[4] = { 1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0}; //ezzel szorzok
	
                int i, j;
	
                for(;;){
		
                    // ide jön a mátrix művelet		
		
                    for (i=0; i<4; i++){
                            PR[i]=0.0;
                            for (j=0; j<4; j++){
                                    PR[i] = PR[i] + T[i][j]*PRv[j];
                            }
                    }
	
                    if (tavolsag(PR,PRv,4) < 0.0000000001) 
				break;
		
                    // ide meg az átpakolás PR-ből PRv-be
			
                    for (i=0;i<4; i++){
			PRv[i]=PR[i];
                    }	
                }
	
                kiir (PR, 4);
            }   
            ]]>    
            </programlisting>
            A <function>PRv[]</function> tömbben tároljuk az oldalak első iterációbeli értékét, és a <function>PR</function> tároljuk el a mátrixszorzás eredményét. A mátrixszorzást a L és PRv tömb között hajtjuk végre,
            pontosan ebben a sorrendben, mivel ez a művelet nem kommutatív, csak bizonyos esetekben. A szorzás eredménye lesz egy 4x1-es oszlopvektor lesz, mely a mi "kis" hálózatunkban lévő 4 oldal PageRank-jét tartalmazza.
            A <function>kiir()</function> függvénnyel pedig kiíratjuk az egyes oldalakhoz tartozó eredményeket, mely a következő képpen zajlik:
            <programlisting language="c"><![CDATA[
                void
                kiir (double tomb[], int db){
	
                    int i;
	
                    for (i=0; i<db; ++i){
                        printf("%f\n",tomb[i]);
                    }
                }
            ]]>
            </programlisting>
            Tehát egy <function>for</function> ciklussal bejárjuk a tömböt, és egyenkét kiírjuk az értékeket. 
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Viggo Brun, XX. századi norvég matematikushoz kpacsolódik a Brun tétel kidolgozása, melyet 1919-ben bizonyított be. A tétel azt mondja ki, hogy <emphasis role="strong">az ikerprímek reciprokösszege egy véges értékhez, úgynevezett
            Brun-konstanshoz konvergál.</emphasis> Ikerprímeknek nevezzük azokat a prímpárokat, melyek különbsége 2. A konvergálás pedig azt jelenti, hogy az reciprokösszeg soha nem halad meg egy bizonyos értéket, csak
            tetszőleges mértékben megközelíti. Ezt bitonyítottuk be egy R programmal, amit az előbbi linken láthatsz. Az R nyelv kifejezetten matematikai számításokhoz, statisztikák és grafikonok készítéséhez lett
            kifejlesztve. Ezért ideális ennek a tételnek a bizonyítsásához is. Magát az ehhez szükséges programot <link xlink:href="https://www.rstudio.com/products/rstudio/download/#download">itt</link> tudod letölteni.
            A feladat megoldásához a matlab kiegészítőre lesz szükséged, melyet ezzel a parancsal tudsz telepíteni:
            <programlisting>
                install.packages("matlab")
            </programlisting>  
        </para>
        <para>
            Ha megnézed a <filename>stp.r</filename> forráskódot, láthatod, hogy az R nyelv szintaktikája eltér a C nyelvétől, de könnyen tanulható. Mivel az R nyelv iteratív nyelv, ezért nem kell lefordítanod az egész
            fájlt gépi kóddá, hanem sorról sorra írod be, és folyamatosan lefordul, majd végrahajtódik. A program futtatásához elsőnek be kell tölteni a matlab függvénykönyvtárat, majd létrehozzuk a stp függvényt.
            <programlisting language="R"><![CDATA[
                library(matlab)

                stp <- function(x){

                        primes = primes(x)
                        diff = primes[2:length(primes)]-primes[1:length(primes)-1]
                        idx = which(diff==2)
                        t1primes = primes[idx]
                        t2primes = primes[idx]+2
                        rt1plust2 = 1/t1primes+1/t2primes
                        return(sum(rt1plust2))
                }
            ]]>
            </programlisting>
            Ez a függvény 1 paramétert kér, és ezt adja tovább a <function>primes</function> beépitett matlab függvénynek. Ez a függvény a megadott x-ig kiír minden prím számot egy vektorba. A <function>diff</function>
            változóban eltároljuk a <function>primes</function> vektorban lévő egymás melleti prímek különbségét. Ezután az <function>idx</function> vektorban pedig <function>diff</function> vektor elemeinek indexét
            tároljuk el, ahol amelyek értéke 2. Ezután index alapján megnézzük, hogy melyek ezek párok, ahol a különbség kettő. Majd felhasználjuk a Brun-tételt, tehát vesszük a prímeknek a reciprokát, és azt adjuk össze.
            Mivel egy függvéynt akarunk kirajzolni, ezért meg kell adnunk egy x és egy y értéket, hogy ki tudjuk rajzolni az ábrát.
            <programlisting language="R"><![CDATA[
                x=seq(13, 1000000, by=10000) 
                y=sapply(x, FUN = stp)
                plot(x,y,type="b")
            ]]>
            </programlisting>
            A <function>seq()</function> függvénnyel megadjuk, hogy x-tengekyen mettől-meddig haladjunk, és milyen lépésközzel. A következő sort, pedig így kell érteni: <function>y = stp(x)</function>. Tehát minden y-hoz
            hozzárendeljük az <function>stp(x)</function> értékét. A <function>plot()</function> függvény pedig kirajzolja az (x,y) értékeket egy grafikonon. Ha majd MATLAB-ot kell használnod, akkor jól megfogod ismerni a
            <function>plot(), plot3()</function> és a hasonló kiírató függvényeket. Tehát, ha ezt lefuttatod, akkor a következő ábrát fogod látni:
            <figure>
                <title>Brun-tétel</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Primek_R/brun_tetel.png" format="JPG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
 
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Monty HAll probléma lényege a következő. Van 3 ajtó, az egyik mögött van a nyeremény, a többi mögött semmi. A játékos választ egyet a 3 ajtó közül, majd a játékmester kinyit egy olyan
            ajtót, amit a játékos nem választott, és nincs mögötte semmi. Ezután megkérdezi a játékost, hogy szeretne-e változtatni a döntésén, vagy marad az általa elsőnek kiszemelt ajtónál. Kérdés az, hogy megéri-e váltania?
            Ahogy a belinkelt videóban is láthattad ez még a legjobb matematikusoknak is fejfájést okozott. Tehát a válsz, a mindenkit foglalkoztató kérdésre az, hogy igen, megéri váltani.
        </para>
        <para>
            Ennek oka nagyon egyszerű. Az első tippednél 1/3 az esélye annak, hogy eltaláltad a helyes ajtót. Ekkor ha váltasz, akkor buksz, ha maradsz a döntésednél, akkor viszont nyersz. De tegyük
            fel, hogy nem találtad el a megfelelő ajtót. Ebben az esetben te rámutatsz egy üres ajtóra, a játékmester kinyitja neked a másik üres ajtót. Tehát, ha ebben az esetben váltasz, akkor nyersz.
            Ennek az esély pedig 2/3-hoz. Hiszen 2/3 eséllyel tippelsz rosszul az elején. 
            Egy szemléltető ábra, a fent linkelt oldalról: <link xlink:href="https://m.blog.hu/bh/bhaxor/image/montyhall2.png">https://m.blog.hu/bh/bhaxor/image/montyhall2.png</link>.
        </para>
        <para>
            Ezt próbáljuk szimulálni egy R programban.
            <programlisting language= "R"><![CDATA[
                kiserletek_szama=10000000
                kiserlet = sample(1:3, kiserletek_szama, replace=T)
                jatekos = sample(1:3, kiserletek_szama, replace=T)
                musorvezeto=vector(length = kiserletek_szama)
            ]]>
            </programlisting>
            Első lépésben megadjuk, hogy mennyi legyen a kísérletek száma. Ha ez meg volt, akkor véletlenszerűséget szimuláljuk a sample() függvénnyel. Ahogy látjátok ennek 3 argumentuma van, az első
            megadja, hogy mettől-meddig generáljon random számokat. Majd megadjuk, hogy háynszor tegye meg ezt, és a replace=T(rue) pedig azt engedi meg, hogy lehessen ismétlődés a számok között. Lényegében itt
            egy tömböt adunk a sample()-nek át, amit átrendez.
            Tehát a kísérletek tömbben tároljuk, hogy az egyes esetekben hol van a nyeremény, a jatekos tömbben a játékos tippjeit. A műsorvezető változó pedig szintén egy tömb/vektor, melynek jelenleg csak a méretét adjuk meg, mivel
            az ő döntése függ a játékosétól és a nyeremény helyétől is.   
            <programlisting language="R"><![CDATA[
                for (i in 1:kiserletek_szama) {

                    if(kiserlet[i]==jatekos[i]){
    
                        mibol=setdiff(c(1,2,3), kiserlet[i])
    
                    }else{
    
                        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
                    }

                    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

                }]]>   
            </programlisting>
            A for ciklusban az i változót futtajuk 1-től a kísérletek számáig. Két esetet kell szétbontani itt, a játékos elatlálta a megfelelő ajtót, vagy sem. Ezt vizsgáljuk az if-ben. Tehát, ha az
            a kiserlet tömb első elem és a jatekos tömb első eleme megegyezik, akkor a játékvezető csak azt az egy ajtót nem választhatja. A mibol tömbben, pont ezt tároljuk el. Ehhez a setdiff() függvényt használjuk
            ,mely a megadott tömbből kiveszi a kiserlet tömb első elemével megegyző értéket. Ugyen ez történik az else ágon is, csak ott mind a kiserlet, mind a jatekos tömb első elemét ki kell vonni a meagdott 
            tömbből. Ez alapján pedig fel tudjuk tölteni a musorvezeto vektort a megfelelő értékekkel, ehhez megint a sample() függyvényt használjuk.
            <programlisting language="R"><![CDATA[
                nemvaltoztatesnyer= which(kiserlet==jatekos)
                valtoztat=vector(length = kiserletek_szama)
             ]]>
            </programlisting>
            A nemvaltozatesnyer vektorba a which() függvénnyel betöltjük azon elemek indexét melyek a a kiserlet és a jatekos tömbben azonos pozícióban vannak, és megegyeznek. Ezután létrehozzuk a
            valtoztat vektort, melynek mérete megyegyezik a kísérletek számával.
            <programlisting language="R"><![CDATA[
                for (i in 1:kiserletek_szama) {

                    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
                    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
                }
                valtoztatesnyer = which(kiserlet==valtoztat)             
            ]]>
            </programlisting>
            A for cikluson belül feltöltjük a valtoztat vektort minden esetben azzal az ajtóval, amire a játékos muatat, ha újra választ. Ezutána a valtoztatesnyer vektorbe betöltjük azonak az elemeknek
            az indexét, melyeknek az értéke megegyezik mind a kiserlet, mind a valtoztat tömbben. Ha ezzel megvagyunk, már csak ki kell print-elni a valtoztatesnyer és a nemvaltoztatesnyer vektorok hosszát, és
            ezzel megtudjuk, hogy melyik lesz a nagyobb. Természetesen az előbbi, ahogy már azt említettem.
        </para>
    </section>

</chapter>                
