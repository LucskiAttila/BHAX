<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
            UML osztálydiagram rajzolása az első védési C++ programhoz. Az osztálydiagramot a forrásokból
            generáljuk (pl. Argo UML, Umbrello, Eclipse UML) Mutassunk rá a kompozíció és aggregáció
            kapcsolatára a forráskódban és a diagramon, lásd még: <link xlink:href="https://youtu.be/Td_nlERlEOs">https://youtu.be/Td_nlERlEOs</link>
        </para>
        <para>
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_6.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_6.pdf (28-32 fólia)</link>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az UML (Unified Modelling Language) egy szabványosított modellező nyelv. Kifejezetten szoftvermérnökök, rendszertervezők és üzleti elemzőknek készítette Grady Booch,
            Ivar Jacobson és James Rumbaugh. Sokrétű felhasználásának csak egy szeletével ismerkedünk most meg, ez pedig az objektumorientált programozási nyelvekkel készítette
            programok specifikálása, ábrázolása lesz. 
        </para>
        <para>
            Ahogy a feladatban is láthatod sok szoftver tartalmaz UML-ek előállításához szükséges szoftverkönyvtárat. Mi ezek közül az Umbrello-val ismerkedünk meg. Az Umbrello
            egy ingyenes UML diagram készítő, mely elérhető Windows-ra és Unix alapú rendszerekre. Támogatja az összes szabványos UML sztenderdet, és am nekünk nagyon fontos, 
            lehetővé teszi, hogy forrásokból generáljunk UML-t(reverse engineering) és viszont(forward engineering). Egyebek mellett támogatja a C++, C#, Java, Javascript és Python
            nyelveket.
        </para>
        <para>
            A feladat szerint a <filename>z3a7.cpp</filename> forrásunkból kell majd UML-t generálnunk. Ehhez az Umbrello <function>Kódimportálási varázslója</function> van 
            segítségünkre. Itt ki kell választani, hogy milyen kódot zseretnénk importálni. A C++-nál alapértelmezetten csak <function>header</function> állományokat 
            keres, ezért ki kell egészíteni a szűrést <function>cpp</function> kiterjesztéseel. Majd értelem szerűen beimportáljuk a fájlt. Ezután pedig oldalt a fastruktúra
            nézetből ki kell választani a klasszneveket és behúzni az osztálydiagrammba. Ez még nem lesz tökéletes, a fenti linken található diasorban látható módon kell
            átalakítani.
            <figure>
                <title>LZWBinFa UML diagram</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Reverse engineering/z3a7.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
            </figure>

        </para>
        <para>
            Fontos még beszélni a kompozíció és aggregáció kapcsolatáról. Mind a kettő az asszociációnak, melyről a 3. felafatban lesz részletesebb kifejtés,
            egy speciális fajtája. Az aggregáció tartalmazást jelöl. Az UML-ből generált kódban meg sem jelenik, emiatt sokan nem is javasolják használatát.
            Jele az ábrában az üres rombusz. A kompozíciót teli rombusszal jelöljük, lényegében erős aggregációnak is nevezhetnénk. Fontos megkötések a 
            kompozíció  esetén, hogy a tartalmazott objektum nem lehet megosztva több objektum között. Emellett a tartalmazó és a tartalmazott objektum együtt
            jön létre, ennek következtében a tartalmazott objektumért a tartalmazó felel. A tartalmazó objektum destruktorábnak kell tartalmaznia a tartalmazott 
            objektum felszabadításához szükséges kódot. Kompozícióra példa a mi feladatunkban a <function>gyoker</function> attribútum. 
        </para>
    </section>        

    <section>
        <title>Forward engineering UML osztálydiagram</title>
        <para>
            UML-ben tervezzünk osztályokat és generáljunk belőle forrást!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az előző feladatban megismert Umbrello programot fogjuk itt is használni. Ehhez elsőnek meg kell csinálni az osztálydiagrammot.
            Legyen a példa egy sakk játék elkészítése. Ekkor létre kell hozni minden bábúnak egy osztályt. Ezeknek lesznek tagfüggvényei, mint
            a <function>lepesvalidator</function>, és tagváltozói, amik a pozíciójukat és az aktuális állapotukat határozza meg. Van egy külön osztály, a
            <function>Sakk</function>, mely az egész játékot kezeli.
            <figure>
                <title>Sakk UML diagram</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Reverse engineering/sakk.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
            </figure>

            Ha elkészítettük a diagrammot, akkor a <function>Kódgenerálás</function> menüpontban végehetjük
            el a források generálását.
        </para>
    </section>
    
    <section>
        <title>Egy esettan</title>
        <para>
            A BME-s C++ tankönyv 14. fejezetét (427-444 elmélet, 445-469 az esettan) dolgozzuk fel!
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Ebben a feladatban az UML osztálydiagramokkal folytatjuk az ismerkedést. Néhány alap dologot tisztázunk elsőnek, amit 
            a korábbi feladatokban már láthattál.
        </para>
        <para>
            UML-ben az osztályokat téglalapok ábrázolják, melyek 3 részből állnak. Az első részben szerepel az osztály neve, ezt követi
            az osztály attribútumai és végül tagváltozói. Mind a változók, mind a függvények előtt szerepel egy láthatóságot jelölő operátor.
            A "+" jelöli a publikus tagokat, a "-" a privát tagokat és a "#" a védetteket. Ezket követi az attribútum neve, típusa, 
            multiplicitása és alapértelmezett értéke.
            <programlisting>
                láthatóság név : típus multiplicitás = alapértelmezett érték {tulajdonságok}
            </programlisting>
            Multiplicitásról akkor esik szó, ha az attribútum egy tömb, ez adja meg a lehetséges elemek számának a halmazát.
            Ez egy egész szám vagy egy egész számból álló intervallum. Szintaxisa a következő:
            <programlisting>
                alsó_határ .. felső_határ
                
                például 0..1 (0 vagy 1)
            </programlisting>
            Kapcsos zárójelek között - a fentiek szerint - tulaajdonságokat adhatunk meg. Ilyen például a <function>readOnly</function>,, mely azt 
            jelöli, hogy az attribútum konstans. 
        </para>
        <para>
            UML osztálydiagramok esetén a műveleteket a következő szintaxissal adhatjuk meg:
            <programlisting>
                láthatóság név paraméterlista: visszatérési_érték {tulajdonságok}
                
                például:
                +lepesValidator(x:int, y:int):bool
            </programlisting>
            A paraméterlistában meg lehet adni aparaméter irányát is, mely alapértelmezetten nulla. 3 féle lehet a paraméter iránya: in, out és inout.
            Az <function>in</function> az érték szerinti paraméterátadást reprezentálja, a <function>out</function> esetén a művelet megváltoztatja a
            pointerként vagy referenciaként átadott objektumot. Végezetül az <function>inout</function> paramétert a függvény felhasználja és módosítja is.
            A paraméterlista szintaxisa a következő:
            <programlisting>
                irány név : típus = alapértelmezett_érték
            </programlisting>
            A műveleteket a <function>query</function> tulajdonsággal tudjuk konstanssá tenni, melyet az attribútumokhoz hasonlóan kapcsos zárójelek 
            közé kell írni. Mind a változókra, mind a függvényekre igaz, hogy a statikusságot UML-ben aláhúzással jelöljük.
        </para>
        <para>
            Eddig a diagram csomópontjait tárgyaltuk. Most lássuk a csomópontokat összekötő irányított szakaszokat, kapcsolatokat.
        </para>
        <para>
            Elsőnek ismerjük meg az assszociációt, mint két osztály kapcsolatát. A diagramon egy vonallal jelöljük, melyenek közepén
            helyezkedik el az asszociáció neve, de ennek irány nem mindig egyértelmű, ezért gyakran használunk nyilakat.
            Az asszociácóhoz tatrozhatnak szerepnevek is, melyek azt jelölik, hogy miként vesznek részt az osztályok a 
            kapcsolatban. Fontos tulajdonsága az asszociációknak, hogy van multiplicitásuk, tehát többszörös kapcsolat lehet 2 osztály
            között. Abban az esetben, ha egy dinamikus tömböt kell végigjárni, érdemes elgondolkodni az asszociatív tömbök használatában, ahol
            egy kulccsal tudjuk azonosítani az elemeket. Ennek a megvalósítása UML-ben a minősített asszociáció, melynek vége egy téglalapban 
            tartalmazza az asszociációt létrehozó minősítő(k) halmazát. Minősítőnek a másik oldalon lévő osztály egy vagy több attribútumát
            választjuk. Az asszociációnak lehetnek attribútumai, ezeket az asszociációs osztály reprezentálja. Ezek az osztályok szaggatott vonallal
            vannak összekötve az asszocációval. Az asszociációs osztályokat normál osztályként implementáljuk, mely tartalmaz egy bal és egy jobb osztályra
            mutató mutatót. És segíti a másik oldal elrését is az osztályoknak. 
        </para>
        <para>
            <emphasis role="strong">Az esettanulmány</emphasis>
        </para>
        <para>
            Egy számítógép-alkatrészekkel és számítógép konfiurációval foglalkozó kereskedésnek kell elkészíteni egy szoftvert.
            A szoftver feladata, hogy nnyílvántartsa az alkatrészeket és a konfigurációkat. Támogatnia kell a termékek 
            állományból való betöltését, képernyőn történő megjelenítését, az árak rugalmas kialakítást.
        </para>
        <para>
            A koncepció 2 részből áll. Elsőnek ki kell alakítani egy keretrendszert osztálykönyvtár formájában, mely alapszinten
            támogatja a termékek kezelését. Erre kell ráépíteni a számítógép-alkatrészeket kezelő rendszert. Cél, hogy a keretrendszer
            módosítása nélkül lehessen a jövőben új termékcsaládokat támmogató szoftvereket készíteni.
        </para>
        <para>
            Kezdjük a keretrendszer kialakításával. Ehhez szükség van egy <function>Product</function> osztályra, mely 
            a termékek általánios kezelését implementálja. Ebből fognak leszármazni az egyes osztályok. Amik minden termék jelllemzője, mint a 
            kor, a kezdő ár, azok kerülnek bele a <function>Product</function> osztályba. Például a típusa, meg a kódja mindegyiknek egyedi, ezért
            az ezeket visszaadó függvéyneket virtuálisnakk deklaráljuk. Így járunk el az összes metódussal, ami termékfüggő. 
        </para>
        <para>
            Mivel a kereskedés számítógép-konfigurációkat is árul, ezért szükséges az összetett termékek kezelése is. Ezt a 
            <function>CompositeProduct</function> osztály valósítja meg. Az egyes alkatrészeket vektorban tároljuk, melyhez az 
            <function>AddPart</function> metódussal tudunk elemeket adni. Az adatfolyamból az összetett termékeket a 
            egy extra paraméterrel adjuk meg. Ez a paraméter tartalmazza, hogy hány elemből áll, így tudjuk, hogy az utána következő x darab 
            hozzá tartozik.
        </para>
        <para>
            Az egyes termékeket nyílván kell tartani. Ezért van szükség a <function>ProductInventory</function> osztályra.
            Feladata a betöltött termékek tárolása memóriában, azok adatfolyamba írása, és formázott megjelenítése. Ebben az osztályban 
            is egy vektorban tároljuk a termékeket. 
        </para>
        <para>
            A probléma az, hogy mivel a keretrendszer egy osztálykönvtár, emiatt az általunk bevezetett termékosztályokat nem ismerheti. 
            Emiatt szükségünk vcan még egy osztályra, mely áthidalja ezt a problémát. Ehhez létrehozzuk a ProductFactory osztályt.
            Ennek a <function>ReadAndCreateProduct</function> függvényét a keretrendszerben kell definiálni, de az ez által 
            meghívott <function>CreateProduct</function> függvény már virtuális, tehár implememtációját rábízzuk a leszármazott 
            osztályokra. 
        </para>
        <para>
            Amikor elkszítjük a keretrendszerre épülő alkalmazásunkat, a <function>ProductFactory</function> osztályt kell
            leszármaztatnunk, ez lesz a <function>ComputerProductFactory</function>. Erre azért van szükség, hogy az előbb említett 
            virtuális függvényhez definíciót tudjunk adni.
            
        </para>
    </section>        
        
    <section>
        <title>BPMN</title>
        <para>
            Rajzoljunk le egy tevékenységet BPMN-ben! 
        </para>
        <para>
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_7.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_7.pdf (34-47 fólia)</link>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A BPMN(Business Process Model and Notation) üzleti folyamatok ábrázolásához használt nyelv. Jelenlegi legújabb verziója
            a BPMN 2.0. 
        </para>
        <para>
            Vegyük példának a következő ábrát. Ez a hitelfelvétel folyamatát ábrázolja, melyben az egyes folyamatok együtt
            működnek. Jelen esetben az egyik ág a bank, a másik pedig az ügyfél. 
             <figure>
                <title>Bank BPMN diagram</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Reverse engineering/BPMN Bank.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
            Tehát az első lépésként az ügyfél megérkezik a bankba. Ezzel párhiuzamosan a recepciós köszönti. Majd az ügyfél sorszámot kér a recepción, és a 
            recepciós felveszi őt a várakozók sorába. A párhuzamos folyamatok közötti kapcsolatot, üzenetküldést a szaggatott vonal jelöli. Az egymás utáni 
            folyamatokat pedig iráynított szakaszok jelölik. Tehát az ügyfél kivárja a sorát, majd érdeklődik a rendelkezésre álló hitelekről. Ezt a tájékozatatást a 
            hitelekkel foglalkozó alkalmazott adja meg. Ehhez szükség van az ügyfél személyes adatira, melyeket el is kér. Miután eldöntötték, hogy milyen hitelt
            választ az ügyfél, az igénylés tovább adódik az elbírálónak. Az elbíráló eldönti, hogy megadja-e a hitelt az üygfélnek. Ezalatt az ügyfél több napot is vár.
            Majd, ha megszületett a döntés, akkor az ügyfél értesítést kap. Ezzel a banki folyamat véget ér. Az ügyfél folyamata pedig ketté ágazik. Ha elutasították, akkot 
            vége, ha nem, akkor aláírja a megállapodást, majd megkapja a juttatást.
        </para>
    </section>        

	
    <section>
        <title>BPEL Helló, Világ! egy visszhang folyamat</title>
        <para>
		Egy visszhang folyamat megvalósítása az alábbi teljes videó tutoriál ” alapján: https://youtu.be/0OnlYWX2v_I
	</para>	
	<para>
		A feladat megoldásához először le kell töltenünk az alábbi linkekről néhány dolgot:
			https://www.eclipse.org/downloads/packages/release/kepler/sr2/eclipse-ide-java-ee-developers
			https://tomcat.apache.org/download-90.cgi
			www.apache.org/dyn/closer.cgi/ode/apache-ode-war-1.3.8.zip
	 	ezzel feltelepítjük a BPEL Designer pluginokat Eclipsbe és konfigurációkat az Apache Tomcat 8.5, Java JDK 9, Apache ODE, Eclipse Oxygen-nel.
		Majd telep1tsük fel az Eclipse exe telep1tőjével azon belül a Eclipse IDE for Java Developers csomagot, majd kattintsunk a Launch gombra, az alapértelmezett munkaállománnyal indítsuk el a programot. Majd az üdvözlőlap kiixelése után kattintsunk a Help/Install New Software menüpontra. Majd a work with fülnél kiválasztjuk az Oxygen csomagot, majd a találatok közül az SOA Development-ből a BPEL Commons, BPEL Runtime Adapter, BPEL Visual Designer kiegészítőket telepítjük elfogadva a licenszet, ezzel újraindul az Eclipse.                                                                                        
		Az Apache-ode-war mappából az ode.war fájlt másoljuk át az Apache-tomcat/webapps mappába, így az Apache-ode-war mappára már nem s lesz szükségünk. Majd egy parancssort nyitva a cd paranccsal belépünk az Apache-tomcat/bin mappába, ahol a chod a+x catalina.sh paranccsal írási jogot adunk a catalina.sh fájlra minden felhasználó számára. Majd ./catalina.sh run paranccsal futtatjuk a fájlt, ezzel elindul a tomcat szerver.                       
	   	Majd miután újraindult az Eclapse az alsó részen ráklikkelünk a Servers fülre, majd ráklikkelünk a kék aláhúzott linkre ami azt írja jelenleg nincs elérhető szerver, kattintsunk rá a létrehozáshoz. Ráklikkelünk majd az Apache-n belül az Ode v1.xServer típúsu-t szervert válasszuk ki. Majd az ODE és a TOMCAT home könyvtárának beállítjuk a Apache-tomcat/webapps/ode mappa elérését, melyet ha megtaláltunk a cd paranccsal akkor a pwd paranccsal kiirathatjuk az elérérsét a home könytvártól, amit ugye felhasználunk a TOMCAT és ODE home könyvtárának. 
		Majd a létrehozott szerveren való beállítások eléréséhez ráklikkelünk a létrehozott szerverre a Servers fül alatt ugye, majd az Open Launch Configuration-re, majd az Arguments füére klikkelve a VM Arguments részből kitöröljük a -Djava.endorsed.dirs.../endorsed" részt. Majd a Classpath fülre kattintva a User entriesüt kijelölve kattintunk a Add Extrenal JARs-ra, ahol a Downloads fülre kattintva az Apach-tomcat/bin/tomcat-juli.rar fájlt megnyitjuk, így hozzáadtuk a User Entries-hez. Ezzel a szerverünk működik az Eclipse-ben is, jobb egérgombbal kattintva a Servers fül alatt a szerverünkre majd a Start gombbal elindíthatjuk és a Stop gombbal megállíthatjuk.
		Majd az Eclipse File/New/Other/BPEL/BPEL Project fülére kattintva megnyitjuk a projekt varázslót, ahol nevet adunk a projektünknek, például HelloWorld és a Target runtime fülnél kiválasztjuk a szerverünket, majd megadjuk a tartalom mappa nevét is, például bpelContent. Ezzel létrehozzuk a HelloWorld nevű projektünket, amin még kell beállításokat végeznünk.
		Majd lenyitjuk a HelloWorld projekt fülét és jobb klikkelünk a bpelContent-re majd New/Other-re ahol BPEL Process File-t választjuk ki majd megadjuk a Process nénvek a HelloWorld nevet például és a Namespace-ban a http://helloworld.localhost, majd a következőre klikkelünk, ahol a Sablon fülnél az egyidejű BPEL process-et választjuk, illetve a Service address-t http://localhost:8080/ode/process/HelloWorld azonosítót adjuk. Ezzel megkapjuk az ábrát a workspace felületen.
		Majd a FIX_ME-Add_Business_Logic_Here-t kijelöljük és alul a Properties fülre klikkelünk, majd a Description-on belül a Name mezőt átírjuk Assign-ra. Majd a Details fülre kattintva a 4-es számra klikkelve a New-ra kattintunk majd a From rész input/payload/input:string és a To rész output/payload/result:string mezőket kijelölve a munkafelületre kattintva generáljuk a változókat.
		Majd a HelloWorldArtifacts.wsdl fájlt megnyitva a Properties/General/Address mezőt átírjuk http://localhost:8080/ode//process/HelloWorld-re. Majd rákattintunk a nyilak közti négyzetre és a Generate Binding Connect-re klikkelve létrehozzuk a kapcsolatot. 
		Majd a bpelContent/new/other/BPEL/BPEL Developement Descriptor-t hozunk létre. Miután létrehoztuk a munkaablakban beállítjuk az Associated Port mező értékét HelloWorldPort-ra.
		Majd a szerverünkre a Servers fül alatt jobb klikkelünk és Add and Remove-ra kattintunk, ahol a HelloWorld-öt kijelölve Add-ra kattintva hozzáadjuk a szerverhez. Majd jobb klikkelve Start gombra nyomva elindítjuk a szervert és a HelloWorldArtifacts.wsdl-en jobb klikkelve majd Web Services/Test with Web Services Explorer-re kattintunk, majd a munkablakban a Name/process-re kattintva megkapjuk az input mezőt, ahova beírunk random szöveget majd a Go!-ra kattintva megkapjuk a result-ba ugyanazt, tehát működik a szerver.                                                       
	    </para>
	                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="BPEL.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
	</section>       
     
    <section>
        <title>
            TeX UML
        </title>
        <para>
            Valamilyen TeX-es csomag felhasználásával készíts szép diagramokat az OOCWC projektről (pl.
            use case és class diagramokat)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A TeX egy szerkesztő rendszer, ami széleskörben elterjedt a tudományos körökben. 
            Erre épül a LaTeX szövegszerkesztő, amely az alapját képezi ennek a könyvnek is.
            TeX-hez rengeteg csomag érhető el, ezek közül mi a TiKz-UML csomagot
            fogjuk ebben a feladatban használni. Ez viszont nem fogja megcsinálni nekünk kézzel
            a diagramot, nekünk kell begépelni egy <filename>.tex</filename> kiterjesztésű fájlba.
        </para>
        <caution>
            <title>TikZ-UML</title>
            <para>
            Használatához szükség van a <filename>texlive-pictures</filename> csomagra és
            a <filename>tikz-uml.sty</filename> fájlra, amit a TikZ-UML oldaláról 
            tudsz letölteni. Ezt a fájlt a forrásunk könyvtárába kell helyezni.
            </para> 
        </caution>
        <para>
            A forrás keretét így adjuk meg:
            <programlisting>
                \documentclass{article}
                    ...
                \begin{document}
                    ...
                \end{document}
            </programlisting>
            Meg kell adnunk a szükséges csomagokat, melyet a <function>\usepackage{}</function>
            jelzéssel tehetjük meg.
            <programlisting>
\documentclass{article}

\usepackage{tikz}
\usepackage{tikz-uml}

\begin{document}
    ...
\end{document}
            </programlisting>
            Ha meg vannak a szükéges csomagok, akkor elsőnek a csomagokat adjuk meg, amik az 
            OOCWC projekt osztályit tartalmazzák.
            <programlisting>
\documentclass{article}

\usepackage{tikz}
\usepackage{tikz-uml}

\begin{document}
\begin{tikzpicture} 
\begin{umlpackage}[x=0, y=0]{justine}
\begin{umlpackage}[x=0, y=0]{robocar}
\end{umlpackage}
\begin{umlpackage}[x=10, y=0]{sampleclient}
\end{umlpackage}
\end{umlpackage} 
\end{tikzpicture}
\end{document}
            </programlisting>
            <figure>
                <title>OOCWC UML diagram 1</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Reverse engineering/TexUML/texuml1.png" format="PNG" scale="150"/>
                        </imageobject>
                    </mediaobject>
            </figure>
            MOstmár kész a diagram alap szerkezete, el kell kezdeni ábrázolni az egyes csomagokhoz tartozó osztályokat. Elsőnek a 
            kezdjük a <function>CarLexer</function> osztállyal. Az osztályokat a <function>\umlclass</function> segítségével 
            tudjuk létrehozni. Szintaxisa a következő:
            <programlisting><![CDATA[
                \umlclass{<név>}{<tagváltozók>}{<metódusok>}
            ]]></programlisting>
            Az egyes tagváltozókat és függvényeket a "\\" karakterekkel választjuk el. Ahogy már megtanultuk a korábbi fejezetekbe, 
            "+"-al jelöljük a publikus tagokat és "-"-al a privátokat. Az osztály teljes implementációja a következő.
            <programlisting><![CDATA[
\begin{umlpackage}[x=0, y=0]{robocar}
\umlclass{justine::robocar::CarLexer}{
	- name : char[128] \\
	- role : char \\
	- route : std::vector<unsigned int>}{
	+ yylex() : int \\
	+ operator <<(os : std::ostream&, cl:CarLexer&) : std::ostream& <<friend>> \\
	+ get\_name() : char* \\
	+ get\_role() : char \\
	+ get\_num() :int \\
	+ get\_errnumber() : int \\
	+ get\_guided() : bool \\
	+ get\_cmd() : int \\
	+ get\_id() : int \\
	+ get\_route : std::vector<unigned int>& \\ + get\_from() : unsigned int \\
	+ get\_to() : unsigned int \\
	- m\_cmd() : int \\
	- num () : int \\
	- m\_errnumber() : int \\
	- m\_guided() : bool \\
	- m\_id() : int \\
	- from() : unsigned int \\
	- to() : unsigned int
	}
\end{umlpackage}
            ]]></programlisting>
                              <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../attention_raising/Source/Reverse engineering/TexUML/texuml2.png" format="PNG" scale="200"/>
                        </imageobject>
                    </mediaobject>
	    </para>
    </section> 

</chapter>                
